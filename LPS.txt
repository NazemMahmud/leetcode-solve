/**
 * Problem link: https://leetcode.com/problems/two-sum
 * 1-Two Sum
 * Solution: Array, Hashmap
 * Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
   You may assume that each input would have exactly one solution, and you may not use the same element twice.
   You can return the answer in any order.
 * add each of theirs node and return the sum as a linked list
 * 2. Add Two Numbers
   More challenges
   18. 4Sum - m
   167. Two Sum II - Input Array Is Sorted - m
   170. Two Sum III - Data structure design - E
 */


// PHP
class Solution {

    /**
     * @param Integer[] $nums
     * @param Integer $target
     * @return Integer[]
     */
    function twoSum($nums, $target) {
        $indexMap = [];
        $len = count($nums);
        for($i=0; $i<$len; $i++) {
            $remain = $target - $nums[$i];
            if (isset($indexMap[$remain])) {
                return [$indexMap[$remain], $i];
            }
            $indexMap[$nums[$i]] = $i;
        }
    }
}


// JS
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    let hash = [];
	for (let num in nums) {

		if(hash.includes(target-nums[num])) {
		    hash.push(nums[num]);
			return [hash.indexOf(target-nums[num]), +num]
		}
		hash.push(nums[num]);
	}
};

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
